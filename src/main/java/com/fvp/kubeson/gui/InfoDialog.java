package com.fvp.kubeson.gui;

import com.fvp.kubeson.Configuration;
import com.fvp.kubeson.Main;
import com.fvp.kubeson.core.Upgrade;
import javafx.geometry.Pos;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.ProgressBar;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import javafx.stage.Window;

class InfoDialog extends Alert {

    private Button upgradeButton;

    private ProgressBar progressBar;

    private Label upgradeMessage;

    InfoDialog(Window parentWindow) {
        super(AlertType.INFORMATION);

        upgradeButton = new Button("Upgrade");
        progressBar = new ProgressBar();
        progressBar.setMaxWidth(Double.MAX_VALUE);
        upgradeMessage = new Label();

        upgradeButton.setOnAction(me -> Upgrade.startDownload());

        progressBar.progressProperty().unbind();
        progressBar.progressProperty().bind(Upgrade.getDownloadWorker().progressProperty());

        refreshUpgrade();

        setTitle(Configuration.APP_NAME);
        setHeaderText("Kubeson - Version: " + this.getClass().getPackage().getImplementationVersion());

        VBox vbox = new VBox();
        vbox.setAlignment(Pos.CENTER);
        vbox.setSpacing(10);

        Label lbl1 = new Label("Kubeson provides an interface to visualize JSON logs generated by kubernetes' pods");
        Label lbl2 = new Label("Created by: Felipe Vianna Perez");
        Label lbl3 = new Label("Licensed under Apache License Version 2.0");

        vbox.getChildren().addAll(lbl1, lbl2, lbl3, upgradeButton, upgradeMessage, progressBar);

        getDialogPane().contentProperty().set(vbox);
        getDialogPane().getStylesheets().add(getClass().getClassLoader().getResource("App.css").toExternalForm());
        getDialogPane().getStyleClass().add("info-dialog");

        // Set Icon
        Stage stage = (Stage) getDialogPane().getScene().getWindow();
        stage.getIcons().addAll(Main.getAppIcons());
        stage.setX(parentWindow.getX() + parentWindow.getWidth() / 2 - 340);
        stage.setY(parentWindow.getY() + parentWindow.getHeight() / 2 - 220);
    }

    void refreshUpgrade() {
        switch (Upgrade.getState()) {
            case DOWNLOADING:
                upgradeButton.setDisable(true);
                progressBar.setVisible(true);
                upgradeMessage.setVisible(true);
                break;

            case UPGRADE_AVAILABLE:
            case UPGRADE_ERROR:
                upgradeButton.setDisable(false);
                progressBar.setVisible(false);
                upgradeMessage.setVisible(true);
                break;

            case VALIDATING:
            case UNPACKING:
            case UPGRADE_SUCCESSFUL:
                upgradeButton.setDisable(true);
                progressBar.setVisible(false);
                upgradeMessage.setVisible(true);
                break;

            default:
                upgradeButton.setDisable(true);
                progressBar.setVisible(false);
                upgradeMessage.setVisible(false);
        }
        upgradeMessage.setText(Upgrade.getMessage());
    }
}
